// <auto-generated />
using Lykke.Job.SqlBridgeChecker.SqlData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Lykke.Job.SqlBridgeChecker.SqlData.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Lykke.Job.SqlBridgeChecker.SqlData.Models.BalanceUpdate", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("BalanceUpdates");
                });

            modelBuilder.Entity("Lykke.Job.SqlBridgeChecker.SqlData.Models.Candlestick", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssetPair")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<double>("Close")
                        .HasColumnType("float");

                    b.Property<DateTime>("Finish")
                        .HasColumnType("datetime");

                    b.Property<double>("High")
                        .HasColumnType("float");

                    b.Property<bool>("IsAsk")
                        .HasColumnType("bit");

                    b.Property<double>("Low")
                        .HasColumnType("float");

                    b.Property<double>("Open")
                        .HasColumnType("float");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Candlesticks2");
                });

            modelBuilder.Entity("Lykke.Job.SqlBridgeChecker.SqlData.Models.CashOperation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Asset")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("CashOperations");
                });

            modelBuilder.Entity("Lykke.Job.SqlBridgeChecker.SqlData.Models.CashTransferOperation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Asset")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("FromClientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ToClientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("CashTransferOperations");
                });

            modelBuilder.Entity("Lykke.Job.SqlBridgeChecker.SqlData.Models.ClientBalanceUpdate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Asset")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BalanceUpdateId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<double>("NewBalance")
                        .HasColumnType("float");

                    b.Property<double?>("NewReserved")
                        .HasColumnType("float");

                    b.Property<double>("OldBalance")
                        .HasColumnType("float");

                    b.Property<double?>("OldReserved")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BalanceUpdateId");

                    b.ToTable("ClientBalanceUpdates");
                });

            modelBuilder.Entity("Lykke.Job.SqlBridgeChecker.SqlData.Models.LimitOrder", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AssetPairId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("LastMatchTime")
                        .HasColumnType("datetime");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("Registered")
                        .HasColumnType("datetime");

                    b.Property<double>("RemainingVolume")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Straight")
                        .HasColumnType("bit");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("LimitOrders");
                });

            modelBuilder.Entity("Lykke.Job.SqlBridgeChecker.SqlData.Models.LimitTradeInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Asset")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LimitOrderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OppositeAsset")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OppositeClientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OppositeOrderExternalId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OppositeOrderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<double>("OppositeVolume")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("LimitOrderId");

                    b.ToTable("LimitTradeInfos");
                });

            modelBuilder.Entity("Lykke.Job.SqlBridgeChecker.SqlData.Models.MarketOrder", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AssetPairId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("MatchedAt")
                        .HasColumnType("datetime");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("Registered")
                        .HasColumnType("datetime");

                    b.Property<double?>("ReservedLimitVolume")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Straight")
                        .HasColumnType("bit");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("MarketOrders");
                });

            modelBuilder.Entity("Lykke.Job.SqlBridgeChecker.SqlData.Models.TradeInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LimitAsset")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LimitClientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LimitOrderExternalId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LimitOrderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<double>("LimitVolume")
                        .HasColumnType("float");

                    b.Property<string>("MarketAsset")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MarketClientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MarketOrderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<double>("MarketVolume")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("MarketOrderId");

                    b.ToTable("TradeInfos");
                });

            modelBuilder.Entity("Lykke.Job.SqlBridgeChecker.SqlData.Models.TradeLogItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Asset")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("OppositeAsset")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OppositeOrderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal?>("OppositeVolume")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("TradeId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Volume")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("WalletId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("Lykke.Job.SqlBridgeChecker.SqlData.Models.UserWallet", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("UserWalets");
                });

            modelBuilder.Entity("Lykke.Job.SqlBridgeChecker.SqlData.Models.ClientBalanceUpdate", b =>
                {
                    b.HasOne("Lykke.Job.SqlBridgeChecker.SqlData.Models.BalanceUpdate")
                        .WithMany("Balances")
                        .HasForeignKey("BalanceUpdateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Lykke.Job.SqlBridgeChecker.SqlData.Models.LimitTradeInfo", b =>
                {
                    b.HasOne("Lykke.Job.SqlBridgeChecker.SqlData.Models.LimitOrder")
                        .WithMany("Trades")
                        .HasForeignKey("LimitOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Lykke.Job.SqlBridgeChecker.SqlData.Models.TradeInfo", b =>
                {
                    b.HasOne("Lykke.Job.SqlBridgeChecker.SqlData.Models.MarketOrder")
                        .WithMany("Trades")
                        .HasForeignKey("MarketOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
